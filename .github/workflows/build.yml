name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        if: 1>2
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: mvn clean verify -DskipTests -Pcve 

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        run: mvn clean verify sonar:sonar -Dsonar.organization=eizeng -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=EizenG_projet-todos

      - name: Check Quality Gate
        run: |
          status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=EizenG_projet-todos" | jq -r '.projectStatus.status')
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed: $status"
            exit 1
          else
            echo "Quality Gate passed: $status"
          fi

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Login to Docker
        run: |
          docker login -u=${{ secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_TOKEN }} docker.io

      - name: Build Docker image
        run: |
          docker_username=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          docker_registry_image=$(echo "${{ secrets.DOCKER_REGISTRY_IMAGE }}" | tr '[:upper:]' '[:lower:]')
          docker build -t $docker_username/$docker_registry_image:${{ github.sha }} -t $docker_username/$docker_registry_image:latest .

      - name: Publish Docker image versions
        run: |
          docker_username=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          docker_registry_image=$(echo "${{ secrets.DOCKER_REGISTRY_IMAGE }}" | tr '[:upper:]' '[:lower:]')
          docker push --all-tags $docker_username/$docker_registry_image

      - name: Deploy to Dev
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "1) Logging in to my remote server ..."
           
            docker pull eizeng/todo-app:latest
            docker stop todo-app || true
            docker rm todo-app || true
            docker run -d --name todo-app -p 80:80 eizeng/todo-app:latest
          EOF

      - name: Wait for deploy to finish
        run: |
          echo "Waiting for 30 seconds ..."
          sleep 30

      - name: Check deploy
        env:
          SSH_HOST1: ${{ secrets.SSH_HOST }}
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" http://$SSH_HOST1:80/cicd/_health)
          if [ "$status" != "200" ]; then
            echo "Deployment failed: $status"
            exit 1
          else
            echo "Deployment succeeded: $status"
          fi
