name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up  JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        #if: 1>2
        run: mvn clean verify -DskipTests -Pcve &

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        #votre travail
        #adapter : peut utiliser sonarcloud ou une instance distante
        run: mvn clean verify sonar:sonar -Dsonar.organization=eizeng -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=EizenG_projet-todos

      - name: Check Quality Gate
        #votre travail
        #verifier si la Quality Gate is ok
        # Tester pour voir si jq est installe sur mon environement Github action ou non
        run: |
          status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=EizenG_projet-todos" | jq -r '.projectStatus.status')
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed: $status"
            exit 1
          else
            echo "Quality Gate passed: $status"
          fi

      - name: Package
        run: mvn -B package  -DskipTests=true

      - name: Login to Docker
        #votre travail
        #les trois prochaines etapes peuven etre fusionnees en une seule, le decoupe est volontaire pour plus de comprehension
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME}} -p=${{ secrets.DOCKER_TOKEN}} docker.io

      - name: Build Docker image
        run: |
          docker build -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}:latest  .   

      - name: Publish Docker image versions
        run: |
          docker push --all-tags  ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REGISTRY_IMAGE }}

      - name: Deploy to Dev
        #votre travail
        #se connecter a un serveur distant et deployer l'image docker que vous venez de builder
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "1) Logging in to my remote server ..."

            # Commandes pour vous connecter à votre serveur distant et déployer Docker
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
            docker stop todo-app || true
            docker rm todo-app || true
            docker run -d --name todo-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
          EOF

      - name: Wait for deploy to finish
        #votre travail
        run: |
          echo "Waiting for 30 seconds ..."
          sleep 30

      - name: Check deploy
        #verifier si le deploiement s'est bien passe
        #votre travail
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SSH_HOST }}:80/cicd/_health)
          if [ "$status" != "200" ]; then
            echo "Deployment failed: $status"
            exit 1
          else
            echo "Deployment succeeded: $status"
          fi



